// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: transactions.sql

package postgres

import (
	"context"

	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

const createTransaction = `-- name: CreateTransaction :one
INSERT INTO transactions (wallet_from_id, wallet_to_id, amount)
VALUES ($1, $2, $3)
RETURNING id, time, wallet_from_id, wallet_to_id, amount
`

type CreateTransactionParams struct {
	WalletFromID uuid.UUID
	WalletToID   uuid.UUID
	Amount       decimal.Decimal
}

func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) (Transaction, error) {
	row := q.db.QueryRow(ctx, createTransaction, arg.WalletFromID, arg.WalletToID, arg.Amount)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.Time,
		&i.WalletFromID,
		&i.WalletToID,
		&i.Amount,
	)
	return i, err
}

const listTransactionsByWalletId = `-- name: ListTransactionsByWalletId :many
SELECT id, time, wallet_from_id, wallet_to_id, amount
FROM transactions
WHERE (wallet_from_id = $1 OR wallet_to_id = $1)
ORDER BY time DESC
`

func (q *Queries) ListTransactionsByWalletId(ctx context.Context, walletID uuid.UUID) ([]Transaction, error) {
	rows, err := q.db.Query(ctx, listTransactionsByWalletId, walletID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transaction
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.Time,
			&i.WalletFromID,
			&i.WalletToID,
			&i.Amount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
